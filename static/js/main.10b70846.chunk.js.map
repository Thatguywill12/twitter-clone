{"version":3,"sources":["SidebarOptions.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsIcon","MailOutlineIcon","BookmarkBorderIcon","ListIcon","PersonOutlineIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","Widgets","tweetId","sourceType","screenName","options","height","url","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10b70846.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SidebarOption.css';\r\n\r\nfunction SidebarOption({active, text, Icon}) {\r\n    return (\r\n        <div className={`sidebarOption ${active && 'sidebarOption--active' }`}>\r\n            <Icon/>\r\n          <h2>{text}</h2>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOption\r\n","import React from 'react';\r\nimport './Sidebar.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport SidebarOption from './SidebarOptions';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            {/* twitter icon */}\r\n            <TwitterIcon className=\"sidebar__twitterIcon\"/>\r\n            < SidebarOption active Icon={HomeIcon} text=\"Home\"/>\r\n            < SidebarOption Icon={SearchIcon} text=\"Explore\"/>\r\n            < SidebarOption Icon={NotificationsIcon} text=\"Notifications\"/>\r\n            < SidebarOption Icon={MailOutlineIcon} text=\"Messages\"/>\r\n            < SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\"/>\r\n            < SidebarOption Icon={ListIcon} text=\"Lists\"/>\r\n            < SidebarOption Icon={PersonOutlineIcon} text=\"Profile\"/>\r\n            < SidebarOption Icon={MoreHorizIcon} text=\"More\"/>\r\n         \r\n            {/* tweet button */}\r\n            <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth>Tweet</Button>\r\n\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBo3MEJW2R4rkO3_ZMxdT_G7N8p6j2hjd4\",\r\n  authDomain: \"twitter-clone-1-105cc.firebaseapp.com\",\r\n  databaseURL: \"https://twitter-clone-1-105cc.firebaseio.com\",\r\n  projectId: \"twitter-clone-1-105cc\",\r\n  storageBucket: \"twitter-clone-1-105cc.appspot.com\",\r\n  messagingSenderId: \"721673662801\",\r\n  appId: \"1:721673662801:web:fe0d774818833a3aae6370\",\r\n  measurementId: \"G-RZ3C58W5LP\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, { useState } from 'react';\r\nimport './TweetBox.css';\r\nimport {Avatar, Button} from \"@material-ui/core\";\r\nimport db from './firebase';\r\n\r\n\r\nfunction TweetBox() {\r\n    const [tweetMessage, setTweetMessage] = useState('');\r\n    const [tweetImage, setTweetImage] = useState('');\r\n\r\n    const sendTweet = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('posts').add({\r\n            displayName: 'Will Jackson III',\r\n            username: 'ThatGuyWill',\r\n            verified:true,\r\n            text: tweetMessage,\r\n            image: tweetImage,\r\n            avatar:\r\n                \"https://mail.google.com/mail/u/0?ui=2&ik=c6d5757666&attid=0.1.1&permmsgid=msg-f:1676127370584050908&th=1742ccf689f8ccdc&view=fimg&sz=s0-l75-ft&attbid=ANGjdJ-abvJyhraxaPHi0feqYdY8t0LK2e62WIyKdXDDydhCpmtioUDbnNUdy9FXNsl7Lxp1ApxbotJK29UeAqezsJDozvB0gQlkgTyXutZrZPP9oa-UviVWIVxbmq4&disp=emb\"\r\n        });\r\n\r\n        setTweetMessage(\"\");\r\n        setTweetImage(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"tweetBox\">\r\n            <form>\r\n                <div className=\"tweetBox__input\">\r\n                    <Avatar src=\"https://mail.google.com/mail/u/0?ui=2&ik=c6d5757666&attid=0.1.1&permmsgid=msg-f:1676127370584050908&th=1742ccf689f8ccdc&view=fimg&sz=s0-l75-ft&attbid=ANGjdJ-abvJyhraxaPHi0feqYdY8t0LK2e62WIyKdXDDydhCpmtioUDbnNUdy9FXNsl7Lxp1ApxbotJK29UeAqezsJDozvB0gQlkgTyXutZrZPP9oa-UviVWIVxbmq4&disp=emb\" />\r\n                    <input\r\n                        onChange={(e) => setTweetMessage(e.target.value)}  \r\n                        value={tweetMessage} \r\n                        placeholder=\"What's happening?\" \r\n                        type=\"text\"\r\n                    />\r\n                </div>\r\n                <input \r\n                    value={tweetImage}\r\n                    onChange={(e) => setTweetImage(e.target.value)}\r\n                    className=\"tweetBox__input\" \r\n                    placeholder=\"Optional: Enter image URL\" \r\n                    type=\"text\"\r\n                />\r\n\r\n                <Button \r\n                    onClick={sendTweet} \r\n                    type=\"submit\" \r\n                    className=\"tweetBox__tweetButton\">\r\n                    Tweet\r\n                </Button> \r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TweetBox;\r\n","import React, { forwardRef } from 'react';\r\nimport './Post.css';\r\nimport {Avatar} from '@material-ui/core';\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\n\r\n\r\nconst Post = forwardRef(\r\n    ({ displayName, username, verified, text, image,avatar}, ref) =>{\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__avatar\">\r\n                <Avatar src={avatar} />\r\n            </div>\r\n            <div className=\"post__body\">\r\n                <div className=\"post__header\">\r\n                    <div className=\"post__headerText\">\r\n                        <h3>\r\n                            {displayName}{\" \"}\r\n                            <span className=\"post__headerSpecial\">\r\n                                {verified && <VerifiedUserIcon className=\"post__badge\" />} @\r\n                                {username}\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"post__headerDescription\">\r\n                        <p>{text}</p>\r\n                    </div>\r\n                </div>\r\n                <img \r\n                    src={image} \r\n                    alt=\"\"\r\n                />\r\n                <div className=\"post__footer\">\r\n                    <ChatBubbleOutlineIcon fontSize=\"small\"/>\r\n                    <RepeatIcon fontSize=\"small\"/>\r\n                    <FavoriteBorderIcon fontSize=\"small\"/>\r\n                    <PublishIcon fontSize=\"small\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './Feed.css';\r\nimport TweetBox from './TweetBox';\r\nimport Post from './Post';\r\nimport db from './firebase';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction Feed() {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        db.collection('posts').onSnapshot((snapshot) => \r\n            setPosts(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"feed\">\r\n\r\n            {/* Header*/}\r\n            <div className=\"feed__header\">\r\n                <h2>Home</h2>\r\n            </div>\r\n\r\n            {/* TweetBox */}\r\n            <TweetBox />\r\n            <FlipMove>\r\n                {posts.map((post) => (\r\n                    <Post \r\n                        key={post.text}\r\n                        displayName ={post.displayName}\r\n                        username={post.username}\r\n                        verified={post.verified}\r\n                        text={post.text}\r\n                        avatar={post.avatar}\r\n                        image={post.image}\r\n                    />\r\n                ))}\r\n            </FlipMove>      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n","import React from 'react'\r\nimport './Widgets.css';\r\nimport{\r\n    TwitterShareButton,\r\n    TwitterTweetEmbed,\r\n    TwitterTimelineEmbed,\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nfunction Widgets() {\r\n    return (\r\n        <div className=\"widgets\">\r\n            <div className=\"widgets__input\">\r\n                <SearchIcon className=\"widgets__searchIcon\" />\r\n                <input placeholder=\"Search Twitter\" type=\"text\" />\r\n            </div>\r\n\r\n            <div className=\"widgets__widgetContainer\">\r\n                <h2>Whats Happening?</h2>\r\n                <TwitterTweetEmbed tweetId={\"1298494373278220290\"} />\r\n\r\n                <TwitterTimelineEmbed\r\n                sourceType=\"profile\"\r\n                screenName=\"elonmusk\"\r\n                options={{height:400}}\r\n                />\r\n                <TwitterShareButton\r\n                url={\"\"}\r\n                options={{}}\r\n                />\r\n                   \r\n                \r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Widgets\r\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\nimport Widgets from './Widgets';\n\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n\n//BEM\n    <div className=\"app\">\n      {/* side-bar */}\n      < Sidebar />\n      {/* feed */}\n      <Feed />\n      {/* widgets */}\n      <Widgets />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// This page is the main app component","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}